% Atualiza o novo poligono gerado a partir da intersecao
% entre um sensor parcialmente contido na area de interesse e a area
% de interesse no array que guarda todos os sensores, e o retorna
% - > Recebe o array que guarda todos os sensores - sensors -, o array
% que guarda o índice dos sensores parcialmente contidos na area de interesse,
% em relação a - sensors -, - sensorsIdxPartiallyContained - e a area de monitoramento
% que assim como o sensor e um poligono.
%  -> Devolve o novo array de sensores, com os poligonos atualizados
% xi - Conjunto de coordenadas x dos pontos de intersecao
% yi - Conjunto de coordenadas y dos pontos de intersecao

% sensorsu = sensors updated
function [sensorsu, xi, yi] = updateSensorPolygonPartiallyContained(sensors, sensorsIdxPartiallyContained, monitoringArea)
    polyshapeMonitoringArea = planarPolygon2Polyshape(monitoringArea);
    % sizeSensors = length(sensors);
    % xi = zeros(1, 2*sizeSensors);
    % yi = zeros(1, 2*sizeSensors);
    xi = [];
    yi = [];
    for k=sensorsIdxPartiallyContained
        % [hasInter, newPolygon] = interPolygon(sensors(k), monitoringArea);
        currentSensor = sensors(k);
        currentPolyshapeSensor = planarPolygon2Polyshape(currentSensor);
        sensorIntersect = intersect(currentPolyshapeSensor, polyshapeMonitoringArea);
        verticesSensorIntersect = sensorIntersect.Vertices;
        hasInter = ~isempty();
        if hasInter
            newPolygon = polyshape2PlanarPolygon(sensorIntersect);
            sensors(k) = newPolygon;
        end
        % Identificando os pontos de intersecao
        xCoordCurrentSensor = sensor.getXPointCoords();
        yCoordCurrentSensor = sensor.getYPointCoords();
        xCoordIntersectPolygon = verticesSensorIntersect(:,1);
        yCoordIntersectPolygon = verticesSensorIntersect(:,2);
        xCoordIntersectionPoints = setdiff(xCoordIntersectPolygon, xCoordCurrentSensor, 'stable');
        yCoordIntersectionPoints = setdiff(yCoordIntersectPolygon, yCoordCurrentSensor, 'stable');
        xi = horzcat(xi, xCoordIntersectionPoints);
        yi = horzcat(yi, yCoordIntersectionPoints);
    end
    sensorsu = sensors;
end